#!/usr/bin/env python3
"""
Simulaci√≥n de Robots Monstruicidas vs Monstruos
Sistema con motor de reglas CSV para comportamiento de agentes
SIMULACI√ìN EN TIEMPO REAL CON ANIMACI√ìN
"""

import sys
import os
import time
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from environment import Environment
from robot import Robot
from monster import Monster
from rule_engine import RuleEngine
from config import *

def main(show_visualization: bool = True, real_time: bool = True):
    """
    Funci√≥n principal de la simulaci√≥n
    
    Args:
        show_visualization: Si mostrar la visualizaci√≥n 3D
        real_time: Si ejecutar en tiempo real con animaci√≥n
    """
    print("ü§ñ Simulaci√≥n de Robots Monstruicidas vs Monstruos")
    print("=" * 50)
    
    # Inicializar motor de reglas
    print("üìã Cargando motor de reglas...")
    rule_engine = RuleEngine()
    
    if not rule_engine.load_rules():
        print("‚ùå Error: No se pudieron cargar las reglas CSV")
        print("   Verifica que los archivos existan en la carpeta 'data/'")
        return
    
    # Mostrar resumen de reglas
    rule_engine.print_rules_summary()
    
    # Validar reglas
    errors = rule_engine.validate_rules()
    if errors['robot'] or errors['monster']:
        print("‚ö†Ô∏è Advertencias en las reglas:")
        for agent_type, error_list in errors.items():
            if error_list:
                print(f"   {agent_type}: {', '.join(error_list)}")
    
    # Crear entorno
    print("\nüåç Creando entorno 3D...")
    environment = Environment()
    
    # Crear robots con motor de reglas
    print(f"\nü§ñ Creando {NUM_ROBOTS} robots y {NUM_MONSTERS} monstruos...")
    robots = []
    monsters = []
    
    for i in range(NUM_ROBOTS):
        pos = environment.get_random_free_position()
        if pos:
            robot = Robot(i, pos, environment, rule_engine)
            robots.append(robot)
    
    for i in range(NUM_MONSTERS):
        pos = environment.get_random_free_position()
        if pos:
            monster = Monster(i, pos, environment, rule_engine)
            monsters.append(monster)
    
    print(f"‚úÖ Creados {len(robots)} robots y {len(monsters)} monstruos")
    
    # Mostrar posiciones iniciales
    print("\nüìç Posiciones iniciales:")
    print(f"   ü§ñ ROBOTS ({len(robots)}):")
    for robot in robots:
        if robot.alive:
            print(f"      Robot {robot.id}: Posici√≥n {tuple(robot.position)} - Estado: {'Vivo' if robot.alive else 'Muerto'}")
    
    print(f"   üëπ MONSTRUOS ({len(monsters)}):")
    for monster in monsters:
        if monster.alive:
            print(f"      Monstruo {monster.id}: Posici√≥n {tuple(monster.position)} - Estado: {'Vivo' if monster.alive else 'Muerto'}")
    
    if real_time and show_visualization:
        print(f"\nüöÄ Iniciando simulaci√≥n en TIEMPO REAL por {SIMULATION_STEPS} pasos...")
        print("üí° Presiona Ctrl+C para detener la simulaci√≥n")
        run_real_time_simulation(environment, robots, monsters, rule_engine)
    else:
        # Ejecutar simulaci√≥n tradicional
        print(f"\nüöÄ Iniciando simulaci√≥n por {SIMULATION_STEPS} pasos...")
        run_simulation(environment, robots, monsters, rule_engine)
        
        # Mostrar resultados finales
        print("\nüìà Resultados finales:")
        print(f"   ‚Ä¢ Pasos ejecutados: {SIMULATION_STEPS}")
        print(f"   ‚Ä¢ Robots vivos: {sum(1 for r in robots if r.alive)}")
        print(f"   ‚Ä¢ Monstruos vivos: {sum(1 for m in monsters if m.alive)}")
        
        for robot in robots:
            if robot.alive:
                print(f"   ‚Ä¢ Robot {robot.id}: {robot.get_memory_size()} experiencias en memoria")
        
        # Generar visualizaci√≥n si se solicita
        if show_visualization:
            print("\nüé® Generando visualizaci√≥n 3D...")
            try:
                fig = environment.visualize(robots, monsters)
                fig.show()
                print("‚úÖ Visualizaci√≥n mostrada en el navegador")
            except Exception as e:
                print(f"‚ö†Ô∏è Error al mostrar visualizaci√≥n: {e}")
                print("üíæ Guardando visualizaci√≥n como archivo HTML...")
                try:
                    fig.write_html("simulacion.html")
                    print("‚úÖ Visualizaci√≥n guardada como 'simulacion.html'")
                except Exception as e2:
                    print(f"‚ùå Error guardando archivo: {e2}")

def run_real_time_simulation(environment, robots, monsters, rule_engine):
    """
    Ejecuta la simulaci√≥n en tiempo real con visualizaci√≥n 3D actualizada en vivo
    Usa Plotly con actualizaci√≥n din√°mica en una sola ventana del navegador
    
    Args:
        environment: Entorno de la simulaci√≥n
        robots: Lista de robots
        monsters: Lista de monstruos
        rule_engine: Motor de reglas
    """
    try:
        print("üé¨ Iniciando simulaci√≥n 3D en TIEMPO REAL...")
        print("üí° Se abrir√° una ventana del navegador que se actualizar√° en vivo")
        print("üí° Ver√°s el movimiento de robots y monstruos paso a paso")
        print("üí° Presiona Ctrl+C para detener")
        
        # Crear figura inicial
        fig = environment.visualize(robots, monsters)
        fig.update_layout(
            title="ü§ñ Simulaci√≥n Robots vs Monstruos - TIEMPO REAL",
            updatemenus=[{
                "type": "buttons",
                "buttons": [
                    {"label": "‚è∏Ô∏è Pausar", "method": "animate", "args": [[None], {"frame": {"duration": 0, "redraw": False}}]}
                ]
            }]
        )
        
        # Mostrar figura inicial
        fig.show()
        print("‚úÖ Ventana del navegador abierta - La simulaci√≥n comenzar√° ahora")
        
        # Ejecutar simulaci√≥n paso a paso con actualizaci√≥n en vivo
        step = 0
        while step < SIMULATION_STEPS:
            step += 1
            print(f"\n--- Paso {step} ---")
            
            # Ejecutar acciones de robots
            for robot in robots:
                if robot.alive:
                    perceptions = robot.perceive()
                    action = robot.act(perceptions)
                    print(f"Robot {robot.id}: {action}")
            
            # Ejecutar acciones de monstruos
            for monster in monsters:
                if monster.alive:
                    perceptions = monster.perceive()
                    action = monster.act(perceptions)
                    print(f"Monstruo {monster.id}: {action}")
            
            # Mostrar estad√≠sticas
            alive_robots = sum(1 for r in robots if r.alive)
            alive_monsters = sum(1 for m in monsters if m.alive)
            print(f"üìä Estado: {alive_robots} robots vivos, {alive_monsters} monstruos vivos")
            
            # Actualizar visualizaci√≥n 3D en tiempo real
            try:
                # Crear nueva figura con estado actualizado
                fig = environment.visualize(robots, monsters)
                fig.update_layout(
                    title=f"ü§ñ Simulaci√≥n Robots vs Monstruos - Paso {step} | Robots: {alive_robots} | Monstruos: {alive_monsters}"
                )
                
                # Actualizar la figura existente (esto deber√≠a actualizar la ventana abierta)
                fig.show()
                
            except Exception as e:
                print(f"‚ö†Ô∏è Error actualizando visualizaci√≥n: {e}")
            
            # Verificar si la simulaci√≥n debe terminar
            if alive_robots == 0:
                print("üèÅ Todos los robots han sido eliminados. Simulaci√≥n terminada.")
                break
            elif alive_monsters == 0:
                print("üèÅ Todos los monstruos han sido eliminados. Simulaci√≥n terminada.")
                break
            
            # Pausa para visualizaci√≥n
            time.sleep(REAL_TIME_DELAY)  # Pausa configurable entre pasos
        
        print("\nüé® Simulaci√≥n completada. La visualizaci√≥n final permanece abierta.")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Simulaci√≥n detenida por el usuario")
    except Exception as e:
        print(f"‚ùå Error en simulaci√≥n en tiempo real: {e}")

def run_simulation(environment, robots, monsters, rule_engine):
    """
    Ejecuta la simulaci√≥n paso a paso
    
    Args:
        environment: Entorno de la simulaci√≥n
        robots: Lista de robots
        monsters: Lista de monstruos
        rule_engine: Motor de reglas
    """
    for step in range(1, SIMULATION_STEPS + 1):
        print(f"\n--- Paso {step} ---")
        
        # Ejecutar acciones de robots
        for robot in robots:
            if robot.alive:
                perceptions = robot.perceive()
                action = robot.act(perceptions)
                print(f"Robot {robot.id}: {action}")
        
        # Ejecutar acciones de monstruos
        for monster in monsters:
            if monster.alive:
                perceptions = monster.perceive()
                action = monster.act(perceptions)
                print(f"Monstruo {monster.id}: {action}")
        
        # Mostrar estad√≠sticas cada 10 pasos
        alive_robots = sum(1 for r in robots if r.alive)
        alive_monsters = sum(1 for m in monsters if m.alive)
        print(f"üìä Estado: {alive_robots} robots vivos, {alive_monsters} monstruos vivos")
        
        if step % 10 == 0:
            print(f"   ü§ñ Robots vivos:")
            for robot in robots:
                if robot.alive:
                    print(f"      Robot {robot.id}: {tuple(robot.position)}")
            
            print(f"   üëπ Monstruos vivos:")
            for monster in monsters:
                if monster.alive:
                    print(f"      Monstruo {monster.id}: {tuple(monster.position)}")
        
        # Verificar si la simulaci√≥n debe terminar
        if alive_robots == 0:
            print("üèÅ Todos los robots han sido eliminados. Simulaci√≥n terminada.")
            break
        elif alive_monsters == 0:
            print("üèÅ Todos los monstruos han sido eliminados. Simulaci√≥n terminada.")
            break

if __name__ == "__main__":
    # Verificar argumentos de l√≠nea de comandos
    show_viz = "--no-viz" not in sys.argv
    real_time = "--real-time" in sys.argv or "--rt" in sys.argv
    static = "--static" in sys.argv
    
    # Por defecto usar tiempo real si no se especifica static
    if not static and not real_time:
        real_time = True
    
    # Si se especifica static, desactivar tiempo real
    if static:
        real_time = False
    
    print(f"üéÆ Modo: {'TIEMPO REAL' if real_time else 'EST√ÅTICO'}")
    print(f"üé® Visualizaci√≥n: {'ACTIVADA' if show_viz else 'DESACTIVADA'}")
    
    main(show_visualization=show_viz, real_time=real_time)